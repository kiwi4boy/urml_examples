/*
 * A widget production factory
 * October 2012
 * 
 * Adapted from EE585 Notes, Ron Smith, 2001
 */
model widgetProduction {

/*
	 * The top capsule, containing instances of other 
	 * capsules and their connectors
	 */
	root capsule SystemContainer {
		capsuleInstance controlSoftware : ControlSoftware
		capsuleInstance productionLine : ProductionLine
		connector controlSoftware.CS2RobotPort and productionLine.toobotPort
		connector controlSoftware.CS2WSPort and productionLine.toWSPort
	}

	/*
	 * Controller
	 */
	capsule ControlSoftware {
		external port CS2WSPort : WorkstationProtocol
		external port CS2RobotPort : RobotProtocol
		timerPort StartTimer
		timerPort StopTimer
		logPort CSLog
		attribute startUpDelay := 2000
		attribute systemStopTime := 30000
		stateMachine {
			transition init : initial -> startup {
			}
			state startup {
				entry {
					inform StartTimer in startUpDelay
					inform StopTimer in systemStopTime
					log CSLog with "CS: startup"
				}
			}
			state produce {
				entry {
					send CS2WSPort.produceWidget()
					log CSLog with "CS: produce"
				}
			}
			state deliver {
				entry {
					send CS2RobotPort.deliverWidget()
					log CSLog with "CS: deliver"
				}
			}
			final state shutDown {
				entry {
					send CS2WSPort.shutDown() and CS2RobotPort.shutDown()
					log CSLog with "CS: shutDown"
				}
			}
			transition start : startup -> produce {
				triggeredBy timeout StartTimer
			}
			transition deliverMe : produce -> deliver {
				triggeredBy CS2WSPort.widgetProduced()
			}
			transition goAgain : deliver -> produce {
				triggeredBy CS2RobotPort.widgetDelivered()
			}
			transition stop1 : startup -> shutDown {
				triggeredBy timeout StopTimer
			}
			transition stop2 : produce -> shutDown {
				triggeredBy timeout StopTimer
			}
			transition stop3 : deliver -> shutDown {
				triggeredBy timeout StopTimer
			}
		}
	}

	/*
	 * The capsule that produces things
	 */
	capsule ProductionLine {
		external port ~toWSPort : WorkstationProtocol
		external port ~toobotPort : RobotProtocol
		capsuleInstance workstationRef : Workstation
		capsuleInstance robotRef : Robot
		connector toWSPort and workstationRef.WS2CSPort
		connector toobotPort and robotRef.Robot2CSPort
	}
	capsule Workstation {
		external port ~WS2CSPort : WorkstationProtocol
		timerPort ProductionTimer
		logPort WSLog
		attribute widgetProductionTime := 3000
		stateMachine {
			state standby {
				entry {
					log WSLog with "WS: standby"
				}
			}
			state producing {
				entry {
					inform ProductionTimer in widgetProductionTime
					log WSLog with "WS: producing"
				}
			}
			final state shutDown {
				entry {
					log WSLog with "WS: shutDown"
				}
			}
			transition t1 : initial -> standby {
			}
			transition begin : standby -> producing {
				triggeredBy WS2CSPort.produceWidget()
			}
			transition finished : producing -> standby {
				triggeredBy timeout ProductionTimer
				action {
					send WS2CSPort.widgetProduced()
				}
			}
			transition stop1 : producing -> shutDown {
				triggeredBy WS2CSPort.shutDown()
			}
			transition stop2 : standby -> shutDown {
				triggeredBy WS2CSPort.shutDown()
			}
		}
	}
	capsule Robot {
		external port ~Robot2CSPort : RobotProtocol
		timerPort DeliveryTimer
		logPort RobotLog
		attribute widgetDeliveringTime := 5000
		stateMachine {
			state standby {
				entry {
					log RobotLog with "Robot: standby"
				}
			}
			state delivering {
				entry {
					inform DeliveryTimer in widgetDeliveringTime
					log RobotLog with "Robot: delivering"
				}
			}
			final state shutDown {
				entry {
					log RobotLog with "Robot: shutDown"
				}
			}
			transition init : initial -> standby {
			}
			transition start : standby -> delivering {
				triggeredBy Robot2CSPort.deliverWidget()
			}
			transition finished : delivering -> standby {
				triggeredBy timeout DeliveryTimer
				action {
					send Robot2CSPort.widgetDelivered()
				}
			}
			transition stop1 : standby -> shutDown {
				triggeredBy Robot2CSPort.shutDown()
			}
			transition stop2 : delivering -> shutDown {
				triggeredBy Robot2CSPort.shutDown()
			}
		}
	}
	protocol WorkstationProtocol {
		incoming {
			widgetProduced()
		}
		outgoing {
			produceWidget()
			shutDown()
		}
	}
	protocol RobotProtocol {
		incoming {
			widgetDelivered()
		}
		outgoing {
			deliverWidget()
			shutDown()
		}
	}
}