/*
 * Parcel Router
 * October 2012
 * 
 * This example illustrates a parcel router.  The parcel router first generates 
 * packages for every 4 second; then, it delivers the packages into 4 bins.  
 */
model ParcelRouter {
/*
	 * Protocol to communicate from the stage to the sensor, so that the stage knows
	 * whether to send parcels to its left or its right; the direction to which the stage
	 * sends depends on the level nuber of that stage
	 */
	protocol SensorProtocol {
		incoming {
		}
		outgoing {
			// leftNotRight is a boolean: if true, then the 
			sendDirection(leftNotRight)
		}
	}
	/*
	 * Protocol to simulate the passing of the parcels.  
	 */
	protocol ParcelPassage {
		incoming {
		}
		outgoing {
			sendParcel(parcelId, destinationCode)
		}
	}
	protocol LevelNumberProtocol {
		incoming {
		}
		outgoing {
			sendLevelNumber(level)
		}
	}
	/*
	 * The top capsule of the parcel router.
	 */
	root capsule ParcelRouter {
	// -- PARCEL ROUTING --
	// generates a parcel
		capsuleInstance generator : Generator
		// first-level stage that distributes parcels to one of the two second-level stages
		capsuleInstance stage0 : Stage
		// second-level stage that distributes parcels to one of bin 0 and bin 1
		capsuleInstance stage1 : Stage
		// second-level stage that distributes parcels to one of bin 2 and bin 3
		capsuleInstance stage2 : Stage
		// the bins are final destinations for the parcels
		capsuleInstance bin0 : Bin
		capsuleInstance bin1 : Bin
		capsuleInstance bin2 : Bin
		capsuleInstance bin3 : Bin
		// connectors provide routes where the parcels will go
		connector generator.gettingOut and stage0.goingIn
		connector stage0.gettingOutRight and stage1.goingIn
		connector stage0.gettingOutLeft and stage2.goingIn
		connector stage1.gettingOutRight and bin0.goingIn
		connector stage1.gettingOutLeft and bin1.goingIn
		connector stage2.gettingOutRight and bin2.goingIn
		connector stage2.gettingOutLeft and bin3.goingIn
		// -- ASSIGNING LEVEL NUMBERS: We want to let the stages be aware of their own levels.
		// ports to put the level numbers in from this top capsule
		port toStage0 : LevelNumberProtocol
		port toStage1 : LevelNumberProtocol
		port toStage2 : LevelNumberProtocol
		// connectors provide routes to assign level numbers to the stages from this top capsule
		connector toStage0 and stage0.fromTop
		connector toStage1 and stage1.fromTop
		connector toStage2 and stage2.fromTop
		// when the model starts, this top capsule assigns a level number to each of the stages
		stateMachine {
			state single
			transition init : initial -> single {
				action {
					send toStage0.sendLevelNumber(1)
					send toStage1.sendLevelNumber(0)
					send toStage2.sendLevelNumber(0)
				}
			}
		}
	}
	/*
	 * A capsule that generates parcels
	 */
	capsule Generator {
		external port gettingOut : ParcelPassage
		timerPort timer
		logPort logger
		attribute timeoutPeriod := 1000
		attribute parcelId := 1
		attribute destinationId := 1
//		attribute sent := false
		stateMachine {
			state single
			transition init : initial -> single {
				action {
					inform timer in timeoutPeriod
				}
			}
			transition sending : single -> single {
//				guard {
//					!sent
//				}
				triggeredBy timeout timer
				action {
					inform timer in timeoutPeriod
					send gettingOut.sendParcel(parcelId, destinationId)
					log logger with "generator sending out a parcel with id " ^ parcelId ^ " to bin " ^ destinationId
					parcelId := parcelId + 1
					destinationId := destinationId + 1
//					sent := true
				}
			}
		}
	}
	capsule Stage {
		external port ~goingIn : ParcelPassage
		external port gettingOutRight : ParcelPassage
		external port gettingOutLeft : ParcelPassage
		external port ~fromTop : LevelNumberProtocol
		port toSensorController : LevelNumberProtocol
		logPort logger
		attribute level
		capsuleInstance chute0 : Chute
		capsuleInstance chute1 : Chute
		capsuleInstance sensorCntl : SensorController
		capsuleInstance switch : Switch
		connector goingIn and chute0.enter
		connector chute0.leave and chute1.enter 
		connector chute0.toControl and sensorCntl.sense
		connector chute1.leave and switch.enter
		connector chute1.toControl and chute1.dummy
		connector sensorCntl.setSwitch and switch.setSwitch
		connector switch.leaveLeft and gettingOutLeft
		connector switch.leaveRight and gettingOutRight
		connector toSensorController and sensorCntl.fromStage
		stateMachine {
			state single
			transition init : initial -> single {
			}
			transition setLevelNumber : single -> single {
				triggeredBy fromTop.sendLevelNumber(levelNumber)
				action {
					level := levelNumber
					send toSensorController.sendLevelNumber(levelNumber)
				}
			}
		}
	}
	capsule Bin {
		external port ~goingIn : ParcelPassage
		attribute numOfParcels := 0
		logPort logger
		stateMachine {
			state single
			transition init : initial -> single {
			}
			transition sending : single -> single {
				triggeredBy goingIn.sendParcel(parcelId, designatedBin)
				action {
					var parcelId 
					parcelId := parcelId + 1
					numOfParcels := numOfParcels + 1
					log logger with "Bin: a parcel with id " ^ parcelId ^ " has entered bin"
				}
			}
		}
	}
	capsule Chute {
		external port ~enter : ParcelPassage
		external port leave : ParcelPassage
		external port ~dummy : ParcelPassage
		external port toControl : ParcelPassage
		logPort logger
		timerPort timer
		attribute storedParcelId := -1
		attribute storedParcelDestination := -1
		attribute timeoutPeriod := 2000
		stateMachine {
			state empty
			state entered
			transition init : initial -> empty { 
			}
			transition pass1 : empty -> empty {
				triggeredBy dummy.sendParcel(parcelId, destination)
			}
			transition pass2 : entered -> entered {
				triggeredBy dummy.sendParcel(parcelId, destination)
			}
			transition parcelEnters : empty -> entered {
				triggeredBy enter.sendParcel(parcelId, destination)
				action {
					storedParcelId := parcelId
					storedParcelDestination := destination
					log logger with "Chute: received parcel ID " ^ parcelId ^ " to destination " ^ destination
					inform timer in timeoutPeriod
					log logger with "Chute: informing timer for " ^ timeoutPeriod / 1000 ^ " seconds"
				}
			}
			transition parcelLeaves : entered -> empty {
				triggeredBy timeout timer
				action {
					send leave.sendParcel(storedParcelId, storedParcelDestination)
					send toControl.sendParcel(storedParcelId, storedParcelDestination)
					log logger with "Chute: sending parcel with id " ^ storedParcelId ^ " to " ^ storedParcelDestination
					storedParcelId := -1
					storedParcelDestination := -1
				}
			}
		}
	}
	capsule Switch {
		external port ~setSwitch : SensorProtocol
		external port ~enter : ParcelPassage
		external port leaveLeft : ParcelPassage
		external port leaveRight : ParcelPassage
		timerPort timer
		logPort logger
		attribute leftNotRight := true
		attribute timeoutPeriod := 1000
		attribute storedParcelId := -1
		attribute storedParcelDestination := -1
		stateMachine {
			state empty
			state entered
			transition init : initial -> empty {
			}
			transition setDirectionWhileEmpty : empty -> empty {
				triggeredBy setSwitch.sendDirection(direction)
				action {
					leftNotRight := direction
				}
			}
			transition setDirectionWhileEntered : entered -> entered {
				triggeredBy setSwitch.sendDirection(direction)
				action {
					leftNotRight := direction
				}
			}
			transition parcelEnters : empty -> entered {
				triggeredBy enter.sendParcel(parcelId, destination)
				action {
					storedParcelId := parcelId
					storedParcelDestination := destination
					log logger with "Switch: parcelId " ^ parcelId ^ " entered, sending to " ^ destination
					inform timer in timeoutPeriod
				}
			}
			transition parcelLeaves : entered -> empty {
				triggeredBy timeout timer
				action {
					if leftNotRight {
						send leaveLeft.sendParcel(storedParcelId, storedParcelDestination)
					} else  {
						send leaveRight.sendParcel(storedParcelId, storedParcelDestination)
					}
				}
			}
		}
	}
	capsule SensorController {
		external port ~sense : ParcelPassage
		external port setSwitch : SensorProtocol
		external port ~fromStage : LevelNumberProtocol
		attribute level
		// key = destination << level & 1
		operation leftShiftAndBitmask(destination, level) {
			var counter := 0
			while (counter < level) {
				destination := destination / 2
				counter := counter + 1
			}
			if (destination % 2 == 1) {
				return 1
			} else  {
				return 0
			}
		}
		stateMachine {
			state single
			transition init : initial -> single {
			}
			transition setLevelNumber : single -> single {
				triggeredBy fromStage.sendLevelNumber(levelNumber)
				action {
					level := levelNumber
				}
			}
			transition senseParcel : single -> single {
				triggeredBy sense.sendParcel(parcelId, destination)
				action {
					send setSwitch.sendDirection(leftShiftAndBitmask(destination, level) != 0)
				}
			}
		}
	}
}