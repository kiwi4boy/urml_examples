/*
 * Readers-Writers Scenario
 * November 2012
 * 
 * In the Readers-Writers problem, a database is shared among two kinds
 * of processes.
 * 
 * (1) Readers.  A reader process may execute a transaction that 
 *    examines the data in a database.
 * 
 * (2) Writers.  A writer process may execute a transaction that
 *    examines and updates the data in a database.
 * 
 * There are a few constraints for this sharing scheme.  First, a
 * writer process must have exclusive access to the database 
 * while updating it.  Secondly, any number of readers is allowed
 * to access concurrently the database when no writer process is
 * accessing the database. 
 */
model ReadersWriters {
	root capsule Top {
		capsuleInstance r0 : Reader
		capsuleInstance r1 : Reader
		capsuleInstance r2 : Reader
		capsuleInstance w0 : Writer
		capsuleInstance w1 : Writer
		capsuleInstance c : Controller
		capsuleInstance db : Database
		connector r0.con and c.r0
		connector r1.con and c.r1
		connector r2.con and c.r2
		connector w0.con and c.w0
		connector w1.con and c.w1
		connector r0.read and db.read
		connector r1.read and db.read
		connector r2.read and db.read
		connector w0.write and db.write
		connector w1.write and db.write
	}
	capsule Controller {
		attribute int  readers := 0
		attribute bool writing := false
		attribute  bool w0waiting := false
		attribute  bool w1waiting := false
		attribute  bool r0waiting := false
		attribute  bool r1waiting := false
		attribute  bool r2waiting := false
		logPort logger
		external port r0 : ControllerRW
		external port r1 : ControllerRW
		external port r2 : ControllerRW
		external port w0 : ControllerRW
		external port w1 : ControllerRW
		stateMachine {
			state none
			state writing {
				entry {
					log logger with "CONTROLLER WRITING"
				}
			}
			state reading {
				entry {
					log logger with "CONTROLLER READING"
				}
			}
			transition init : initial -> none {
			}
			transition askedWriteW0 : none -> writing {
				guard {
					readers == 0 && !writing
				}
				triggeredBy w0.acquireWrite()
				action {
					writing := true
					log logger with "acquire write W0"
					send w0.acknowledge()
				}
			}
			transition askedWriteW0A : none -> writing {
				guard {
					readers == 0 && !writing && w0waiting
				}
				action {
					writing := true
					send w0.acknowledge()
					w0waiting := false
				}
			}
			transition askedWriteW1 : none -> writing {
				guard {
					readers == 0 && !writing
				}
				triggeredBy w1.acquireWrite()
				action {
					writing := true
					log logger with "acquire write W1"
					send w1.acknowledge()
				}
			}
			transition askedWriteW1A : none -> writing {
				guard {
					readers == 0 && !writing && w1waiting
				}
				action {
					writing := true
					send w1.acknowledge()
					w1waiting := false
				}
			}
			transition askedReadR0 : none -> reading {
				guard {
					writing == false
				}
				triggeredBy r0.acquireRead()
				action {
					readers := 1
					log logger with "acquire read R0"
					send r0.acknowledge()
				}
			}
			transition askedReadR1 : none -> reading {
				guard {
					writing == false
				}
				triggeredBy r1.acquireRead()
				action {
					readers := 1
					log logger with "acquire read R1"
					send r1.acknowledge()
				}
			}
			transition askedReadR2 : none -> reading {
				guard {
					writing == false
				}
				triggeredBy r2.acquireRead()
				action {
					readers := 1
					log logger with "acquire read R2 with one reader"
					send r2.acknowledge()
				}
			}
			transition askedReadR0A : none -> reading {
				guard {
					!writing && r0waiting
				}
				action {
					readers := 1
					r0waiting := false
					log logger with "acquire read R0 with one reader"
					send r0.acknowledge()
				}
			}
			transition askedReadR1A : none -> reading {
				guard {
					!writing && r1waiting
				}
				action {
					readers := 1
					r1waiting := false
					log logger with "acquire read R1 with one reader"
					send r1.acknowledge()
				}
			}
			transition askedReadR2A : none -> reading {
				guard {
					!writing && r2waiting
				}
				action {
					readers := 1
					r2waiting := false
					log logger with "acquire read R2 with one reader"
					send r2.acknowledge()
				}
			}
			transition multipleAskedReaderR0 : reading -> reading {
				triggeredBy r0.acquireRead()
				action {
					readers := readers + 1
					log logger with "acquire read R0 with " ^ readers ^ " readers"
					send r0.acknowledge()
				}
			}
			transition multipleAskedReaderR1 : reading -> reading {
				triggeredBy r1.acquireRead()
				action {
					readers := readers + 1
					log logger with "acquire read R1 with " ^ readers ^ " readers"
					send r1.acknowledge()
				}
			}
			transition multipleAskedReaderR2 : reading -> reading {
				triggeredBy r2.acquireRead()
				action {
					readers := readers + 1
					log logger with "acquire read R2 with " ^ readers ^ " readers"
					send r2.acknowledge()
				}
			}
			transition multipleAskedReaderR0A : reading -> reading {
				guard {
					r0waiting
				}
				action {
					readers := readers + 1
					r0waiting := false
					log logger with "acquire read R0 with " ^ readers ^ " readers"
					send r0.acknowledge()
				}
			}
			transition multipleAskedReaderR1A : reading -> reading {
				guard {
					r1waiting
				}
				action {
					readers := readers + 1
					r1waiting := false
					log logger with "acquire read R1 with " ^ readers ^ " readers"
					send r1.acknowledge()
				}
			}
			transition multipleAskedReaderR2A : reading -> reading {
				guard {
					r2waiting
				}
				action {
					readers := readers + 1
					r2waiting := false
					log logger with "acquire read R2 with " ^ readers ^ " readers"
					send r2.acknowledge()
				}
			}
			transition w0requestR : reading -> reading {
				triggeredBy w0.acquireWrite()
				action {
					w0waiting := true
				}
			}
			transition w0requestW : writing -> writing {
				triggeredBy w0.acquireWrite()
				action {
					w0waiting := true
				}
			}
			transition w1requestR : reading -> reading {
				triggeredBy w1.acquireWrite()
				action {
					w1waiting := true
				}
			}
			transition w1requestW : writing -> writing {
				triggeredBy w1.acquireWrite()
				action {
					w1waiting := true
				}
			}
			transition r0request : writing -> writing {
				triggeredBy r0.acquireRead()
				action {
					r0waiting := true
				}
			}
			transition r1request : writing -> writing {
				triggeredBy r1.acquireRead()
				action {
					r1waiting := true
				}
			}
			transition r2request : writing -> writing {
				triggeredBy r2.acquireRead()
				action {
					r2waiting := true
				}
			}
			transition releaseWrite : writing -> none {
				triggeredBy w0.releaseWrite() or w1.releaseWrite()
				action {
					writing := false
					log logger with "release write"
				}
			}
			transition multipleReleaseRead : reading -> reading {
				guard {
					readers > 1
				}
				triggeredBy r0.releaseRead() or r1.releaseRead() or r2.releaseRead()
				action {
					readers := readers - 1
					log logger with "release read with " ^ readers ^ " readers remaining"
				}
			}
			transition releaseRead : reading -> none {
				guard {
					readers == 1
				}
				triggeredBy r0.releaseRead() or r1.releaseRead() or r2.releaseRead()
				action {
					readers := 0
					log logger with "release read with no readers remaining"
				}
			}
		}
	}
	capsule Reader {
		external port ~con : ControllerRW
		external port read : ReadAndWriteThings
		attribute  bool readRequestSent := false
		timerPort timer
		logPort logger
		attribute  int timeoutPeriod := 200
		stateMachine {
			state notReading
			state reading {
				entry {
					send read.read()
					log logger with '' //cell

				}
			}
			transition init : initial -> notReading {
			}
			transition getReading : notReading -> notReading {
				guard {
					readRequestSent == false
				}
				action {
					send con.acquireRead()
					readRequestSent := true
				}
			}
			transition goReading : notReading -> reading {
				triggeredBy con.acknowledge()
				action {
					log logger with "goReading"
					readRequestSent := false
					inform timer in timeoutPeriod
				}
			}
			transition backToNotReading : reading -> notReading {
				triggeredBy timeout timer
				action {
					send con.releaseRead()
				}
			}
		}
	}
	capsule Writer {
		external port ~con : ControllerRW
		external port write : ReadAndWriteThings
		attribute  bool writeRequestSent := false
		timerPort timer
		logPort logger
		attribute int timeoutPeriod := 200
		stateMachine {
			state notWriting
			state writing {
				entry {
					log logger with "writing 1234"
					send write.write(1234)
				}
			}
			transition init : initial -> notWriting {
			}
			transition getWriting : notWriting -> notWriting {
				guard {
					writeRequestSent == false
				}
				action {
					send con.acquireWrite()
					writeRequestSent := true
				}
			}
			transition goWriting : notWriting -> writing {
				triggeredBy con.acknowledge()
				action {
					writeRequestSent := false
					log logger with "goWriting"
					inform timer in timeoutPeriod
				}
			}
			transition backToNotWriting : writing -> notWriting {
				triggeredBy timeout timer
				action {
					send con.releaseWrite()
				}
			}
		}
	}
	capsule Database {
		external port ~read : ReadAndWriteThings
		external port ~write : ReadAndWriteThings
		logPort logger
		attribute int thing := 1
		stateMachine {
			state single
			transition init : initial -> single {
			}
			transition readData : single -> single {
				triggeredBy read.read()
				action {
					log logger with "read: " ^ thing
				}
			}
			transition writeData : single -> single {
				triggeredBy write.write(int data)
				action {
					log logger with "original: " ^ thing
					thing := data
					log logger with "modified: " ^ thing
				}
			}
		}
	}
	protocol ControllerRW {
		incoming {
			acquireRead()
			releaseRead()
			acquireWrite()
			releaseWrite()
		}
		outgoing {
			acknowledge()
		}
	}
	protocol ReadAndWriteThings {
		incoming {
		}
		outgoing {
			read()
			write(int data)
		}
	}
}